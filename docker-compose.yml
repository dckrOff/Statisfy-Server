version: '3.8'

services:
  postgres:
    image: postgres:14-alpine
    container_name: statisfy-postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-1234}
      POSTGRES_DB: ${POSTGRES_DB:-statisfy}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - statisfy-network

  redis:
    image: redis:7-alpine
    container_name: statisfy-redis
    restart: always
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - statisfy-network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: statisfy-app
    restart: always
    ports:
      - "${APP_PORT:-8080}:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/${POSTGRES_DB:-statisfy}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER:-postgres}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD:-1234}
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - NEWS_API_KEY=${NEWS_API_KEY:-your_news_api_key_here}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-your_openai_api_key_here}
      - JWT_SECRET=${JWT_SECRET:-F93sdf9j3r023r90wefjwef9w023rwejfw09}
      - FIREBASE_ENABLED=${FIREBASE_ENABLED:-false}
      - FIREBASE_CONFIG_FILE=${FIREBASE_CONFIG_FILE:-firebase-service-account.json}
      - SCRAPING_ENABLED=${SCRAPING_ENABLED:-true}
      - AI_ENABLED=${AI_ENABLED:-true}
      - JVM_OPTS="-Xms512m -Xmx1g -XX:+UseG1GC -XX:+HeapDumpOnOutOfMemoryError"
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - statisfy-network

  prometheus:
    image: prom/prometheus:latest
    container_name: statisfy-prometheus
    restart: always
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    depends_on:
      - app
    networks:
      - statisfy-network

  grafana:
    image: grafana/grafana:latest
    container_name: statisfy-grafana
    restart: always
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - statisfy-network

volumes:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  statisfy-network:
    driver: bridge 